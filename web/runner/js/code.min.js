/*#########################################
 * PAGES
 *########################################*/

var Modules = {};
var Levels = {};
var Rest = {};
$(document).ready(function() {
	//Use funções de start para cada função do site

	//Inicia todas as entidades REST
	for(var propertyName in Rest) {
	   Rest[propertyName].start();
	}

	//Inicia todos os módulos
	for(var propertyName in Modules) {
	   Modules[propertyName].start();
	}

	//Inicia todas as fases
	for(var propertyName in Levels) {
	   Levels[propertyName].start();
	}
});
/**
 * GHOST
 */

Modules.ghost = {
	start: function() {

	},

	ghosts: [],

	add: function(message) {
		if (Levels.main.started) {
			this.ghosts[message.nickname] = {};

			//The sprite
			this.ghosts[message.nickname].sprite = game.add.sprite(32, 32, 'dude');
			this.ghosts[message.nickname].sprite.animations.add('right', [5, 6, 7, 8], 10, true);
			this.ghosts[message.nickname].sprite.animations.play('right');
			this.ghosts[message.nickname].sprite.alpha = 0.5;

			//The text
			this.ghosts[message.nickname].text = game.add.text(this.ghosts[message.nickname].sprite.x + (this.ghosts[message.nickname].sprite.width / 2), this.ghosts[message.nickname].sprite.y, message.nickname, {
	            font: "10 px Arial",
	            fill: "#ffffff",
	            align: "center"
	        });

	        this.ghosts[message.nickname].text.anchor.setTo(0.5, 1);
		}
	},

	move: function(message) {
		if (this.ghosts[message.nickname] == undefined) {
			this.add(message);
		}

		if (this.ghosts[message.nickname] != undefined) {
			this.ghosts[message.nickname].sprite.x = message.x;
			this.ghosts[message.nickname].sprite.y = message.y;

			this.ghosts[message.nickname].text.x = this.ghosts[message.nickname].sprite.x + (this.ghosts[message.nickname].sprite.width / 2);
        	this.ghosts[message.nickname].text.y = this.ghosts[message.nickname].sprite.y;
		}
	}
}
/**
 * PHASER
 */

var game;

Modules.phaser = {
	start: function() {
		game = new Phaser.Game(this.gameWidth, this.gameHeight, Phaser.CANVAS, 'phaser-canvas', { 
			preload: Levels.main.preload, 
			create: Levels.main.create, 
			update: Levels.main.update, 
			render: Levels.main.render 
		}, false, false);
	},

	gameHeight: 480,

	gameWidth: 320,

	gameAspectRatio: 320 / 480
}
/**
 * SCORE
 */

Modules.score = {
	start: function() {
		
	},

	init: function() {
		this.timerText = game.add.text(Modules.phaser.gameWidth / 2, 0, '0', {
	        font: "65px Arial",
	        fill: "#ffffff",
	        align: "center"
	    });

		this.timerText.fixedToCamera = true;

	    this.timerText.anchor.setTo(0.5, 0);

	    this.startTimer();
	},

	timerCount: 0,

	timerText: null,

	timerInterval: null,

	timerStart: null,

	best: null,

	startTimer: function() {
		Modules.score.timerStart = null;

		this.timerCount = 0;
	    this.timerText.text = this.timerCount;

	    $(window).on('updateLoop', Modules.score.updateTimer);
	},

	updateTimer: function(event) {
		if (Modules.score.timerStart == null) {
			Modules.score.timerStart = (new Date()).getTime();
			Modules.score.timerCount = 0;
		} else {
			Modules.score.timerCount = (new Date()).getTime() - Modules.score.timerStart;	
		}
		
    	Modules.score.timerText.text = (Modules.score.timerCount / 1000).toFixed(3);
	},

	stopTimer: function() {
		$(window).off('updateLoop', Modules.score.updateTimer);

		if (Modules.score.best == null || Modules.score.best > Modules.score.timerCount) {
			Modules.score.best = Modules.score.timerCount;
		}

		//Send the score
		Modules.socket.sender.score(Modules.score.best);
	},

	showTable: function() {
		$('#scores').show();
	},

	hideTable: function() {
		$('#scores').hide();
	},

	refreshTable: function(table) {
		$('#scores table').html('');

		$.each(table, function(index, row) {
			$('#scores table').append('<tr><td>' + index + '</td><td>' + row.nickname + '</td><td>' + (row.time / 1000).toFixed(3) + '</td></tr>');
		});
	}
}
/**
 * SOCKET
 */

Modules.socket = {
	start: function() {
		this.connect();
	},

	connect: function() {
		console.log('WebSocket conectando...');

		if (!Modules.socket.connecting && (Modules.socket.connection == null || (Modules.socket.connecting.readyState !== 0 && Modules.socket.connecting.readyState !== 1))) {
			Modules.socket.connection = new WebSocket('ws://' + url + '/runner');
			Modules.socket.connection.onopen = Modules.socket.onOpen;
			Modules.socket.connection.onmessage = Modules.socket.onMessage;
			Modules.socket.connection.onclose = Modules.socket.onClose;
			Modules.socket.connection.onerror = Modules.socket.onError;
			Modules.socket.connecting = true;
		}
	},

	connection: null,

	connecting: false,

	connected: false,

	onOpen: function(e) {
		console.log('WebSocket conectado!');

		Modules.socket.connected = true;
	},

	onMessage: function(e) {
		var jsonMessage = e.data;
		var message = $.parseJSON(jsonMessage);

		console.log(message);

		if (message.type == 'move') {
			//move the ghost!
			Modules.ghost.move(message);
		} else if (message.type == 'me') {
			if (Levels.main.playerName != null) {
				Levels.main.playerName.text = message.nickname;
			}
			
			Levels.main.nickname = message.nickname;
			Modules.score.best = message.time;
		} else if (message.type == 'score-table') {
			console.log(message);
			Modules.score.refreshTable(message.table);
		}
	},

	onClose: function(e) {
		Modules.socket.connecting = false;
		
		setTimeout(function() {
			Modules.socket.connect();	
		}, 5000);
	},

	onError: function(e) {
		Modules.socket.connecting = false;

		setTimeout(function() {
			Modules.socket.connect();	
		}, 5000);
	},

	sender: {
		move: function(x, y) {
			if (Modules.socket.connected) {
				if (Modules.socket.sender.moveLastTime == null || Modules.socket.sender.moveLastTime < (new Date()).getTime() - 10) {
					x = Math.ceil(x);
					y = Math.ceil(y);

					if (x != Modules.socket.sender.moveLastX || y != Modules.socket.sender.moveLastY) {
						Modules.socket.connection.send(JSON.stringify({
				            type: 'move',
				            x: x,
				            y: y
				        }));

				        Modules.socket.sender.moveLastTime = (new Date()).getTime();
				        Modules.socket.sender.moveLastX = x;
				        Modules.socket.sender.moveLastY = y;
				    }
				}
			}
		},

		moveLastTime: null,
		moveLastX: -1,
		moveLastY: -1,

		score: function(time) {
			if (Modules.socket.connected) {
				Modules.socket.connection.send(JSON.stringify({
		            type: 'score',
		            time: time
		        }));
			}
		},
	}
}
/**
 * MAIN LEVEL
 */

Levels.main = {

    map: null,
    
    tileset: null,
    
    layer: null,
    
    player: null,
    
    facing: 'left',
    
    jumpTimer: 0,
    
    cursors: null,
    
    jumpButton: null,

    jumpLocked: false,

    bg: null,

    finished: false,

    playerName: null,

    started: false,

    restartButton: null,

    nickname: 'Bob',

    frames: 0,

    start: function() {

    },

    preload: function() {
        game.load.tilemap('level1', 'images/level1.json', null, Phaser.Tilemap.TILED_JSON);
        game.load.image('tiles-1', 'images/tiles-1.png');
        game.load.image('tiles-2', 'images/tiles-2.png');
        game.load.spritesheet('dude', 'images/dude.png', 32, 48);
        game.load.spritesheet('droid', 'images/droid.png', 32, 32);
        game.load.image('starSmall', 'images/star.png');
        game.load.image('starBig', 'images/star2.png');
        game.load.image('background', 'images/background2.png');
        game.load.spritesheet('button', 'images/retry.png', 150, 47);

        //No multitouch
        game.input.maxPointers = 1;

        //Center the game
        game.scale.pageAlignHorizontally = true;
        game.scale.pageAlignVertically = true;

        game.scale.forceOrientation(true, false);

        game.scale.width = window.innerWidth;
        game.scale.height = window.innerWidth / Modules.phaser.gameAspectRatio;

        if (game.scale.height > window.innerHeight) {
            game.scale.height = window.innerHeight;
            game.scale.width = window.innerHeight * Modules.phaser.gameAspectRatio;
        }

        $(window).resize(function() {
            game.scale.width = window.innerWidth;
            game.scale.height = window.innerWidth / Modules.phaser.gameAspectRatio;

            if (game.scale.height > window.innerHeight) {
                game.scale.height = window.innerHeight;
                game.scale.width = window.innerHeight * Modules.phaser.gameAspectRatio;
            }

            game.scale.setSize();
        });

        game.scale.setSize();
    },

    create: function() {
        game.physics.startSystem(Phaser.Physics.ARCADE);

        game.stage.backgroundColor = '#000000';

        Levels.main.bg = game.add.tileSprite(0, 0, 800, 600, 'background');

        Levels.main.bg.fixedToCamera = true;

        Levels.main.map = game.add.tilemap('level1');

        Levels.main.map.addTilesetImage('tiles-1');
        Levels.main.map.addTilesetImage('tiles-2');

        Levels.main.map.setCollisionByExclusion([ 13, 14, 15, 16, 46, 47, 48, 49, 50, 51, 69, 70, 71, 72 ]);

        Levels.main.layer = Levels.main.map.createLayer('Tile Layer 1');

        Levels.main.map.setTileIndexCallback([ 69, 70, 71, 72 ], Levels.main.flagCallback, this, 'Tile Layer 1');

        //  Un-comment this on to see the collision tiles
        // layer.debug = true;

        Levels.main.layer.resizeWorld();

        game.physics.arcade.gravity.y = 1000;

        Levels.main.player = game.add.sprite(32, 32, 'dude');
        game.physics.enable(Levels.main.player, Phaser.Physics.ARCADE);

        Levels.main.player.body.bounce.y = 0.2;
        Levels.main.player.body.collideWorldBounds = true;
        Levels.main.player.body.setSize(20, 32, 5, 16);

        Levels.main.player.animations.add('left', [0, 1, 2, 3], 10, true);
        Levels.main.player.animations.add('turn', [4], 20, true);
        Levels.main.player.animations.add('right', [5, 6, 7, 8], 10, true);

        game.camera.follow(Levels.main.player, Phaser.Camera.FOLLOW_PLATFORMER);

        Levels.main.cursors = game.input.keyboard.createCursorKeys();
        Levels.main.jumpButton = game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);

        //Start the score
        Modules.score.init();
        $(window).trigger('updateLoop');

        //Start the player name text
        Levels.main.playerName = game.add.text(Levels.main.player.x + (Levels.main.player.width / 2), Levels.main.player.y, Levels.main.nickname, {
            font: "10 px Arial",
            fill: "#ffffff",
            align: "center"
        });

        Levels.main.playerName.anchor.setTo(0.5, 1);

        //Button
        Levels.main.restartButton = game.add.button((Modules.phaser.gameWidth / 2) - (150 /2), 400, 'button', Levels.main.restart, this, 2, 1, 0);
        Levels.main.restartButton.fixedToCamera = true;
        Levels.main.restartButton.visible = false;

        Levels.main.started = true;

        game.time.events.loop(10, Levels.main.updateLoop, this);

        //Last thing - Positioning the player
        Levels.main.player.x = 0;
        Levels.main.player.y = 300;

        //game.physics.arcade.setBoundsToWorld();
        game.physics.arcade.setBounds(0, 0, 1000, 450);

        //game.physics.arcade.collide(Levels.main.player, Levels.main.layer);
    },

    updateLoop: function() {
        if (Levels.main.frames >= 1) {
            Levels.main.playerName.x = Levels.main.player.x + (Levels.main.player.width / 2);
            Levels.main.playerName.y = Levels.main.player.y;

            if (!Levels.main.finished) {
                Levels.main.player.body.velocity.x = 150;

                if (Levels.main.facing != 'right')
                {
                    Levels.main.player.animations.play('right');
                    Levels.main.facing = 'right';
                }

                //Send the moves to server
                Modules.socket.sender.move(Levels.main.player.x, Levels.main.player.y);

                if ((Levels.main.jumpButton.isDown || game.input.mousePointer.isDown || game.input.pointer1.isDown)) {
                    if (!jumpLocked && Levels.main.player.body.onFloor()) {
                        jumpLocked = true;
                        Levels.main.player.body.velocity.y = -270;
                    }
                } else {
                    jumpLocked = false;
                }
            } else {
                Levels.main.restartButton.visible = true;
            }

            $(window).trigger('updateLoop');
        }
    },

    update: function() {
        game.physics.arcade.collide(Levels.main.player, Levels.main.layer);

        Levels.main.frames++;
    },

    render: function() {
        //game.debug.text(game.time.physicsElapsed, 32, 32);
        //game.debug.body(Levels.main.player);
        //game.debug.bodyInfo(Levels.main.player, 16, 24);
    },

    //Player collided with the flag
    flagCallback: function() {
        if (Levels.main.player.x > 0) {
            Levels.main.finish();
        }
    },

    finish: function() {
        Levels.main.finished = true;

        Modules.score.stopTimer();
        Modules.score.showTable();

        Levels.main.player.animations.stop();
        Levels.main.player.frame = 5;  
        Levels.main.facing = 'idle';
        Levels.main.player.body.velocity.x = 0;

        Levels.main.map.setTileIndexCallback([ 69, 70, 71, 72 ], function() {}, this, 'Tile Layer 1');
    }, 

    restart: function() {
        Levels.main.finished = false;

        Modules.score.hideTable();

        Modules.score.startTimer();

        Levels.main.map.setTileIndexCallback([ 69, 70, 71, 72 ], Levels.main.flagCallback, this, 'Tile Layer 1');

        Levels.main.restartButton.visible = false;

        //Last thing - Positioning the player
        Levels.main.player.x = 0;
        Levels.main.player.y = 300;

        Levels.main.frames = 0;
    }
}
